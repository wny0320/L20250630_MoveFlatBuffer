// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POSITION_MOVE_H_
#define FLATBUFFERS_GENERATED_POSITION_MOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace Move {

struct PositionData;
struct PositionDataBuilder;

struct PositionData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PositionDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X, 4) &&
           VerifyField<int32_t>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct PositionDataBuilder {
  typedef PositionData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(PositionData::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(PositionData::VT_Y, y, 0);
  }
  explicit PositionDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PositionData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PositionData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PositionData> CreatePositionData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    int32_t y = 0) {
  PositionDataBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const Move::PositionData *GetPositionData(const void *buf) {
  return ::flatbuffers::GetRoot<Move::PositionData>(buf);
}

inline const Move::PositionData *GetSizePrefixedPositionData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Move::PositionData>(buf);
}

inline bool VerifyPositionDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Move::PositionData>(nullptr);
}

inline bool VerifySizePrefixedPositionDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Move::PositionData>(nullptr);
}

inline void FinishPositionDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Move::PositionData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPositionDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Move::PositionData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Move

#endif  // FLATBUFFERS_GENERATED_POSITION_MOVE_H_
