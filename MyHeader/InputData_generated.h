// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INPUTDATA_MOVE_H_
#define FLATBUFFERS_GENERATED_INPUTDATA_MOVE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace Move {

struct InputData;
struct InputDataBuilder;

struct InputData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef InputDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4
  };
  uint8_t input() const {
    return GetField<uint8_t>(VT_INPUT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_INPUT, 1) &&
           verifier.EndTable();
  }
};

struct InputDataBuilder {
  typedef InputData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_input(uint8_t input) {
    fbb_.AddElement<uint8_t>(InputData::VT_INPUT, input, 0);
  }
  explicit InputDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<InputData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<InputData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<InputData> CreateInputData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t input = 0) {
  InputDataBuilder builder_(_fbb);
  builder_.add_input(input);
  return builder_.Finish();
}

inline const Move::InputData *GetInputData(const void *buf) {
  return ::flatbuffers::GetRoot<Move::InputData>(buf);
}

inline const Move::InputData *GetSizePrefixedInputData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Move::InputData>(buf);
}

inline bool VerifyInputDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Move::InputData>(nullptr);
}

inline bool VerifySizePrefixedInputDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Move::InputData>(nullptr);
}

inline void FinishInputDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Move::InputData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInputDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Move::InputData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Move

#endif  // FLATBUFFERS_GENERATED_INPUTDATA_MOVE_H_
